# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a small 1 hidden layer Recurrent Neural
# Net on the text of the book Moby Dick.
# This models currently runs on CPU only.

!obj:experiments.FitPredictErrorExperiment {

  metrics: {
    train: [
      !obj:metrics.MisclassPercentage {},
    ],
    test: [
      !obj:metrics.MisclassPercentage {},
    ],
  },

  # Enable predictions to generate example output strings. Requires CPU backend
  # predictions: [train, test],

  dataset: &ds !obj:datasets.MOBYDICK {
    repo_path: '~/data',
    sample_pct: 10, # 10% gives 400 batches like in rnn2
    data_dim: &dd 96,
    unrolls: &ur 5,
    backend_type: &bt np.float32,  # 64 is needed for numerical gradients
  },

  weight_inits: [
    &wt_init !obj:params.SparseEigenValGen {
      sparseness: 15,
      eigenvalue: 1.2,
    },
    &wt_initb !obj:params.NormalValGen {
      loc: 0.0,
      scale: 0.1,
    },
  ],

  lrule: &gdm {
    type: gradient_descent_momentum,
    lr_params: {
      learning_rate: 0.002,  # try 0.002 for RNN, 0.2 for LSTM to start with
      momentum_params: {
        type: linear_monotone,
        initial_coef: 0.9,
        saturated_coef: 0.99,
        start_epoch: 10,
        saturate_epoch: 100,
      },
    },
  },

  # simple RNN model specification
  model: !obj:models.RNN {
    # RNN model parameters
    # --------------------
    # num_grad_params - structure containing the parameters for numerical
    #                   gradient checks specific to recurrent networks.
    # reset_period - Number of time unrolling steps after which the hidden
    #                state is reset back to zero
    # truncate - Backpropagation through time is truncated after the specified
    #             number of time unrolling steps (boolean)
    # unrolls - number of time unrolling steps
    # make_plots - RNN specific plots that show weight matrices and track
    #              convergence of cross-entropy error.
    # batch_size - number of training instances in each mini-batch.  Should
    #              be no larger than the size of the training dataset.
    # num_epochs - the number of iterations through the entire training set
    #              to make in training the model
    # serialized_path - the full location and name to a serialized .prm file
    #                   that we will use to cache this model.  Speeds up
    #                   subsequent use of this model for inference purposes.
    # deserialize_path - the full location and name to deserialize a .prm file
    #                    from that we will use to initialize this model.
    #                    Defaults to serialized_path if deserialize_path
    #                    doesn't exist
    # serialize_schedule - either an int specifying the epoch interval at
    #                      at which to save snapshots of the model, or a list
    #                      of ints specifying the epochs at which to save.
    # layers - list of neural network layer objects.  Models will typically
    #          have a single DataLayer, followed by 1 or more hidden layers,
    #          then a final CostLayer.

    serialized_path: './rnn.pkl',
    serialized_schedule: 100,
    save_checkpoints: 2,
    num_epochs: 800,
    batch_size: &bs 64,
    reset_period: 50,  # 50 for LSTM, 20 for RNN?
    unrolls: *ur,
    make_plots: False,
    truncate: True,  # truncate the back-propagation through time
    # Note: Numerical gradient checking is only supported with CPU fp64 backend
    backend_type: *bt,
    num_grad_params: {
      # Parameters for numerical graient checking
      #------------------------------------------
      # name - name of the layer where the gradient check should be performed.
      #        for standard RNNs, "input", "rec" and "output" are supported,
      #        for LSTM networks, "input", "outputs", data inputs to the LSTM
      #        cell "lstm_ix" "lstm_fx" "lstm_ox" "lstm_cx" and recurrent
      #        inputs to the LSTM cell "lstm_ih" "lstm_fh" "lstm_oh" "lstm_ch"
      # eps - stepsize used for numerical gradient computation. 1e-6 works well
      #       if a 64 bit double precision backend is used
      # x,y - element used for "input"
      # x,z - element used for "rec"
      # u,v - element used for "output"
      # x,y - element used for "lstm_x" (all four gates)
      # x,w - element used for "lstm_h" (all four gates)

      name: output,  # For RNN: output, input, rec.
                     # For LSTM: lstm_fx, lstm_ih, lstm_fh, lstm_oh, lstm_ch
      eps: 0.000001, # use 1e-6 and fp64 if possible
      x: 12,
      y: 60,
      z: 63,
      w: 55,
      v: 56,
      u: 15,
    },

    shortcut_deriv: False,
    layers: [
      &datalayer !obj:layers.DataLayer {
        name: datalayer,
        backend_type: *bt,
        nout: *dd,
      },
      !obj:layers.RecurrentHiddenLayer {
        # RecurrentHiddenLayer parameters
        # -------------------------------
        # Apart from feed forward layers, recurrent layers have parameters:
        # unrolls - number of time unrolling steps
        # gate_actiavation - Only used for LSTM layers. Activation function
        #                    for input, output and forget gate.

        name: recurrent,
        backend_type: *bt,
        lrule_init: *gdm,
        nout: 64,
        unrolls: *ur,
        activation: !obj:transforms.Tanh {},
        #gate_activation: !obj:transforms.Logistic {},
        weight_init: *wt_initb,
        weight_init_rec: *wt_initb,
      },

      &lastlayer !obj:layers.RecurrentOutputLayer {
        name: output,
        backend_type: *bt,
        lrule_init: *gdm,
        nout: *dd,
        unrolls: *ur,
        activation: !obj:transforms.Logistic {},
        weight_init: *wt_initb,
      },

      &costlayer !obj:layers.RecurrentCostLayer {
        name: cost,
        backend_type: *bt,
        ref_layer: *datalayer,
        cost: !obj:transforms.CrossEntropy {
          backend_type: *bt,
        },
      },
    ],
  },

  logging: {
    level: 20,  # 10 debug, 20 info, 30 warning
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
